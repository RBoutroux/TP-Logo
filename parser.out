Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expr
Rule 2     expr -> expr expr_repeat
Rule 3     expr -> expr_repeat
Rule 4     expr_repeat -> REPEAT NUMBER LBRACKET expr RBRACKET
Rule 5     expr_repeat -> expr2
Rule 6     expr2 -> FORWARD terme
Rule 7     expr2 -> BACKWARD terme
Rule 8     expr2 -> LEFT terme
Rule 9     expr2 -> RIGHT terme
Rule 10    expr2 -> PEN UP
Rule 11    expr2 -> PEN DOWN
Rule 12    expr2 -> PEN COLOR COLORVALUE
Rule 13    expr2 -> TO NOM expr END
Rule 14    expr2 -> NOM
Rule 15    terme -> NUMBER
Rule 16    terme -> XCOR
Rule 17    terme -> YCOR
Rule 18    terme -> HEADING

Terminals, with rules where they appear

BACKWARD             : 7
COLOR                : 12
COLORVALUE           : 12
DOWN                 : 11
END                  : 13
FORWARD              : 6
HEADING              : 18
LBRACKET             : 4
LEFT                 : 8
NOM                  : 13 14
NUMBER               : 4 15
PEN                  : 10 11 12
RBRACKET             : 4
REPEAT               : 4
RIGHT                : 9
TO                   : 13
UP                   : 10
XCOR                 : 16
YCOR                 : 17
error                : 

Nonterminals, with rules where they appear

expr                 : 1 2 4 13
expr2                : 5
expr_repeat          : 2 3
expression           : 0
terme                : 6 7 8 9

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expr
    (2) expr -> . expr expr_repeat
    (3) expr -> . expr_repeat
    (4) expr_repeat -> . REPEAT NUMBER LBRACKET expr RBRACKET
    (5) expr_repeat -> . expr2
    (6) expr2 -> . FORWARD terme
    (7) expr2 -> . BACKWARD terme
    (8) expr2 -> . LEFT terme
    (9) expr2 -> . RIGHT terme
    (10) expr2 -> . PEN UP
    (11) expr2 -> . PEN DOWN
    (12) expr2 -> . PEN COLOR COLORVALUE
    (13) expr2 -> . TO NOM expr END
    (14) expr2 -> . NOM

    REPEAT          shift and go to state 4
    FORWARD         shift and go to state 6
    BACKWARD        shift and go to state 7
    LEFT            shift and go to state 8
    RIGHT           shift and go to state 9
    PEN             shift and go to state 10
    TO              shift and go to state 11
    NOM             shift and go to state 12

    expression                     shift and go to state 1
    expr                           shift and go to state 2
    expr_repeat                    shift and go to state 3
    expr2                          shift and go to state 5

state 1

    (0) S' -> expression .



state 2

    (1) expression -> expr .
    (2) expr -> expr . expr_repeat
    (4) expr_repeat -> . REPEAT NUMBER LBRACKET expr RBRACKET
    (5) expr_repeat -> . expr2
    (6) expr2 -> . FORWARD terme
    (7) expr2 -> . BACKWARD terme
    (8) expr2 -> . LEFT terme
    (9) expr2 -> . RIGHT terme
    (10) expr2 -> . PEN UP
    (11) expr2 -> . PEN DOWN
    (12) expr2 -> . PEN COLOR COLORVALUE
    (13) expr2 -> . TO NOM expr END
    (14) expr2 -> . NOM

    $end            reduce using rule 1 (expression -> expr .)
    REPEAT          shift and go to state 4
    FORWARD         shift and go to state 6
    BACKWARD        shift and go to state 7
    LEFT            shift and go to state 8
    RIGHT           shift and go to state 9
    PEN             shift and go to state 10
    TO              shift and go to state 11
    NOM             shift and go to state 12

    expr_repeat                    shift and go to state 13
    expr2                          shift and go to state 5

state 3

    (3) expr -> expr_repeat .

    REPEAT          reduce using rule 3 (expr -> expr_repeat .)
    FORWARD         reduce using rule 3 (expr -> expr_repeat .)
    BACKWARD        reduce using rule 3 (expr -> expr_repeat .)
    LEFT            reduce using rule 3 (expr -> expr_repeat .)
    RIGHT           reduce using rule 3 (expr -> expr_repeat .)
    PEN             reduce using rule 3 (expr -> expr_repeat .)
    TO              reduce using rule 3 (expr -> expr_repeat .)
    NOM             reduce using rule 3 (expr -> expr_repeat .)
    $end            reduce using rule 3 (expr -> expr_repeat .)
    END             reduce using rule 3 (expr -> expr_repeat .)
    RBRACKET        reduce using rule 3 (expr -> expr_repeat .)


state 4

    (4) expr_repeat -> REPEAT . NUMBER LBRACKET expr RBRACKET

    NUMBER          shift and go to state 14


state 5

    (5) expr_repeat -> expr2 .

    REPEAT          reduce using rule 5 (expr_repeat -> expr2 .)
    FORWARD         reduce using rule 5 (expr_repeat -> expr2 .)
    BACKWARD        reduce using rule 5 (expr_repeat -> expr2 .)
    LEFT            reduce using rule 5 (expr_repeat -> expr2 .)
    RIGHT           reduce using rule 5 (expr_repeat -> expr2 .)
    PEN             reduce using rule 5 (expr_repeat -> expr2 .)
    TO              reduce using rule 5 (expr_repeat -> expr2 .)
    NOM             reduce using rule 5 (expr_repeat -> expr2 .)
    $end            reduce using rule 5 (expr_repeat -> expr2 .)
    END             reduce using rule 5 (expr_repeat -> expr2 .)
    RBRACKET        reduce using rule 5 (expr_repeat -> expr2 .)


state 6

    (6) expr2 -> FORWARD . terme
    (15) terme -> . NUMBER
    (16) terme -> . XCOR
    (17) terme -> . YCOR
    (18) terme -> . HEADING

    NUMBER          shift and go to state 16
    XCOR            shift and go to state 17
    YCOR            shift and go to state 18
    HEADING         shift and go to state 19

    terme                          shift and go to state 15

state 7

    (7) expr2 -> BACKWARD . terme
    (15) terme -> . NUMBER
    (16) terme -> . XCOR
    (17) terme -> . YCOR
    (18) terme -> . HEADING

    NUMBER          shift and go to state 16
    XCOR            shift and go to state 17
    YCOR            shift and go to state 18
    HEADING         shift and go to state 19

    terme                          shift and go to state 20

state 8

    (8) expr2 -> LEFT . terme
    (15) terme -> . NUMBER
    (16) terme -> . XCOR
    (17) terme -> . YCOR
    (18) terme -> . HEADING

    NUMBER          shift and go to state 16
    XCOR            shift and go to state 17
    YCOR            shift and go to state 18
    HEADING         shift and go to state 19

    terme                          shift and go to state 21

state 9

    (9) expr2 -> RIGHT . terme
    (15) terme -> . NUMBER
    (16) terme -> . XCOR
    (17) terme -> . YCOR
    (18) terme -> . HEADING

    NUMBER          shift and go to state 16
    XCOR            shift and go to state 17
    YCOR            shift and go to state 18
    HEADING         shift and go to state 19

    terme                          shift and go to state 22

state 10

    (10) expr2 -> PEN . UP
    (11) expr2 -> PEN . DOWN
    (12) expr2 -> PEN . COLOR COLORVALUE

    UP              shift and go to state 23
    DOWN            shift and go to state 24
    COLOR           shift and go to state 25


state 11

    (13) expr2 -> TO . NOM expr END

    NOM             shift and go to state 26


state 12

    (14) expr2 -> NOM .

    REPEAT          reduce using rule 14 (expr2 -> NOM .)
    FORWARD         reduce using rule 14 (expr2 -> NOM .)
    BACKWARD        reduce using rule 14 (expr2 -> NOM .)
    LEFT            reduce using rule 14 (expr2 -> NOM .)
    RIGHT           reduce using rule 14 (expr2 -> NOM .)
    PEN             reduce using rule 14 (expr2 -> NOM .)
    TO              reduce using rule 14 (expr2 -> NOM .)
    NOM             reduce using rule 14 (expr2 -> NOM .)
    $end            reduce using rule 14 (expr2 -> NOM .)
    END             reduce using rule 14 (expr2 -> NOM .)
    RBRACKET        reduce using rule 14 (expr2 -> NOM .)


state 13

    (2) expr -> expr expr_repeat .

    REPEAT          reduce using rule 2 (expr -> expr expr_repeat .)
    FORWARD         reduce using rule 2 (expr -> expr expr_repeat .)
    BACKWARD        reduce using rule 2 (expr -> expr expr_repeat .)
    LEFT            reduce using rule 2 (expr -> expr expr_repeat .)
    RIGHT           reduce using rule 2 (expr -> expr expr_repeat .)
    PEN             reduce using rule 2 (expr -> expr expr_repeat .)
    TO              reduce using rule 2 (expr -> expr expr_repeat .)
    NOM             reduce using rule 2 (expr -> expr expr_repeat .)
    $end            reduce using rule 2 (expr -> expr expr_repeat .)
    END             reduce using rule 2 (expr -> expr expr_repeat .)
    RBRACKET        reduce using rule 2 (expr -> expr expr_repeat .)


state 14

    (4) expr_repeat -> REPEAT NUMBER . LBRACKET expr RBRACKET

    LBRACKET        shift and go to state 27


state 15

    (6) expr2 -> FORWARD terme .

    REPEAT          reduce using rule 6 (expr2 -> FORWARD terme .)
    FORWARD         reduce using rule 6 (expr2 -> FORWARD terme .)
    BACKWARD        reduce using rule 6 (expr2 -> FORWARD terme .)
    LEFT            reduce using rule 6 (expr2 -> FORWARD terme .)
    RIGHT           reduce using rule 6 (expr2 -> FORWARD terme .)
    PEN             reduce using rule 6 (expr2 -> FORWARD terme .)
    TO              reduce using rule 6 (expr2 -> FORWARD terme .)
    NOM             reduce using rule 6 (expr2 -> FORWARD terme .)
    $end            reduce using rule 6 (expr2 -> FORWARD terme .)
    END             reduce using rule 6 (expr2 -> FORWARD terme .)
    RBRACKET        reduce using rule 6 (expr2 -> FORWARD terme .)


state 16

    (15) terme -> NUMBER .

    REPEAT          reduce using rule 15 (terme -> NUMBER .)
    FORWARD         reduce using rule 15 (terme -> NUMBER .)
    BACKWARD        reduce using rule 15 (terme -> NUMBER .)
    LEFT            reduce using rule 15 (terme -> NUMBER .)
    RIGHT           reduce using rule 15 (terme -> NUMBER .)
    PEN             reduce using rule 15 (terme -> NUMBER .)
    TO              reduce using rule 15 (terme -> NUMBER .)
    NOM             reduce using rule 15 (terme -> NUMBER .)
    $end            reduce using rule 15 (terme -> NUMBER .)
    END             reduce using rule 15 (terme -> NUMBER .)
    RBRACKET        reduce using rule 15 (terme -> NUMBER .)


state 17

    (16) terme -> XCOR .

    REPEAT          reduce using rule 16 (terme -> XCOR .)
    FORWARD         reduce using rule 16 (terme -> XCOR .)
    BACKWARD        reduce using rule 16 (terme -> XCOR .)
    LEFT            reduce using rule 16 (terme -> XCOR .)
    RIGHT           reduce using rule 16 (terme -> XCOR .)
    PEN             reduce using rule 16 (terme -> XCOR .)
    TO              reduce using rule 16 (terme -> XCOR .)
    NOM             reduce using rule 16 (terme -> XCOR .)
    $end            reduce using rule 16 (terme -> XCOR .)
    END             reduce using rule 16 (terme -> XCOR .)
    RBRACKET        reduce using rule 16 (terme -> XCOR .)


state 18

    (17) terme -> YCOR .

    REPEAT          reduce using rule 17 (terme -> YCOR .)
    FORWARD         reduce using rule 17 (terme -> YCOR .)
    BACKWARD        reduce using rule 17 (terme -> YCOR .)
    LEFT            reduce using rule 17 (terme -> YCOR .)
    RIGHT           reduce using rule 17 (terme -> YCOR .)
    PEN             reduce using rule 17 (terme -> YCOR .)
    TO              reduce using rule 17 (terme -> YCOR .)
    NOM             reduce using rule 17 (terme -> YCOR .)
    $end            reduce using rule 17 (terme -> YCOR .)
    END             reduce using rule 17 (terme -> YCOR .)
    RBRACKET        reduce using rule 17 (terme -> YCOR .)


state 19

    (18) terme -> HEADING .

    REPEAT          reduce using rule 18 (terme -> HEADING .)
    FORWARD         reduce using rule 18 (terme -> HEADING .)
    BACKWARD        reduce using rule 18 (terme -> HEADING .)
    LEFT            reduce using rule 18 (terme -> HEADING .)
    RIGHT           reduce using rule 18 (terme -> HEADING .)
    PEN             reduce using rule 18 (terme -> HEADING .)
    TO              reduce using rule 18 (terme -> HEADING .)
    NOM             reduce using rule 18 (terme -> HEADING .)
    $end            reduce using rule 18 (terme -> HEADING .)
    END             reduce using rule 18 (terme -> HEADING .)
    RBRACKET        reduce using rule 18 (terme -> HEADING .)


state 20

    (7) expr2 -> BACKWARD terme .

    REPEAT          reduce using rule 7 (expr2 -> BACKWARD terme .)
    FORWARD         reduce using rule 7 (expr2 -> BACKWARD terme .)
    BACKWARD        reduce using rule 7 (expr2 -> BACKWARD terme .)
    LEFT            reduce using rule 7 (expr2 -> BACKWARD terme .)
    RIGHT           reduce using rule 7 (expr2 -> BACKWARD terme .)
    PEN             reduce using rule 7 (expr2 -> BACKWARD terme .)
    TO              reduce using rule 7 (expr2 -> BACKWARD terme .)
    NOM             reduce using rule 7 (expr2 -> BACKWARD terme .)
    $end            reduce using rule 7 (expr2 -> BACKWARD terme .)
    END             reduce using rule 7 (expr2 -> BACKWARD terme .)
    RBRACKET        reduce using rule 7 (expr2 -> BACKWARD terme .)


state 21

    (8) expr2 -> LEFT terme .

    REPEAT          reduce using rule 8 (expr2 -> LEFT terme .)
    FORWARD         reduce using rule 8 (expr2 -> LEFT terme .)
    BACKWARD        reduce using rule 8 (expr2 -> LEFT terme .)
    LEFT            reduce using rule 8 (expr2 -> LEFT terme .)
    RIGHT           reduce using rule 8 (expr2 -> LEFT terme .)
    PEN             reduce using rule 8 (expr2 -> LEFT terme .)
    TO              reduce using rule 8 (expr2 -> LEFT terme .)
    NOM             reduce using rule 8 (expr2 -> LEFT terme .)
    $end            reduce using rule 8 (expr2 -> LEFT terme .)
    END             reduce using rule 8 (expr2 -> LEFT terme .)
    RBRACKET        reduce using rule 8 (expr2 -> LEFT terme .)


state 22

    (9) expr2 -> RIGHT terme .

    REPEAT          reduce using rule 9 (expr2 -> RIGHT terme .)
    FORWARD         reduce using rule 9 (expr2 -> RIGHT terme .)
    BACKWARD        reduce using rule 9 (expr2 -> RIGHT terme .)
    LEFT            reduce using rule 9 (expr2 -> RIGHT terme .)
    RIGHT           reduce using rule 9 (expr2 -> RIGHT terme .)
    PEN             reduce using rule 9 (expr2 -> RIGHT terme .)
    TO              reduce using rule 9 (expr2 -> RIGHT terme .)
    NOM             reduce using rule 9 (expr2 -> RIGHT terme .)
    $end            reduce using rule 9 (expr2 -> RIGHT terme .)
    END             reduce using rule 9 (expr2 -> RIGHT terme .)
    RBRACKET        reduce using rule 9 (expr2 -> RIGHT terme .)


state 23

    (10) expr2 -> PEN UP .

    REPEAT          reduce using rule 10 (expr2 -> PEN UP .)
    FORWARD         reduce using rule 10 (expr2 -> PEN UP .)
    BACKWARD        reduce using rule 10 (expr2 -> PEN UP .)
    LEFT            reduce using rule 10 (expr2 -> PEN UP .)
    RIGHT           reduce using rule 10 (expr2 -> PEN UP .)
    PEN             reduce using rule 10 (expr2 -> PEN UP .)
    TO              reduce using rule 10 (expr2 -> PEN UP .)
    NOM             reduce using rule 10 (expr2 -> PEN UP .)
    $end            reduce using rule 10 (expr2 -> PEN UP .)
    END             reduce using rule 10 (expr2 -> PEN UP .)
    RBRACKET        reduce using rule 10 (expr2 -> PEN UP .)


state 24

    (11) expr2 -> PEN DOWN .

    REPEAT          reduce using rule 11 (expr2 -> PEN DOWN .)
    FORWARD         reduce using rule 11 (expr2 -> PEN DOWN .)
    BACKWARD        reduce using rule 11 (expr2 -> PEN DOWN .)
    LEFT            reduce using rule 11 (expr2 -> PEN DOWN .)
    RIGHT           reduce using rule 11 (expr2 -> PEN DOWN .)
    PEN             reduce using rule 11 (expr2 -> PEN DOWN .)
    TO              reduce using rule 11 (expr2 -> PEN DOWN .)
    NOM             reduce using rule 11 (expr2 -> PEN DOWN .)
    $end            reduce using rule 11 (expr2 -> PEN DOWN .)
    END             reduce using rule 11 (expr2 -> PEN DOWN .)
    RBRACKET        reduce using rule 11 (expr2 -> PEN DOWN .)


state 25

    (12) expr2 -> PEN COLOR . COLORVALUE

    COLORVALUE      shift and go to state 28


state 26

    (13) expr2 -> TO NOM . expr END
    (2) expr -> . expr expr_repeat
    (3) expr -> . expr_repeat
    (4) expr_repeat -> . REPEAT NUMBER LBRACKET expr RBRACKET
    (5) expr_repeat -> . expr2
    (6) expr2 -> . FORWARD terme
    (7) expr2 -> . BACKWARD terme
    (8) expr2 -> . LEFT terme
    (9) expr2 -> . RIGHT terme
    (10) expr2 -> . PEN UP
    (11) expr2 -> . PEN DOWN
    (12) expr2 -> . PEN COLOR COLORVALUE
    (13) expr2 -> . TO NOM expr END
    (14) expr2 -> . NOM

    REPEAT          shift and go to state 4
    FORWARD         shift and go to state 6
    BACKWARD        shift and go to state 7
    LEFT            shift and go to state 8
    RIGHT           shift and go to state 9
    PEN             shift and go to state 10
    TO              shift and go to state 11
    NOM             shift and go to state 12

    expr                           shift and go to state 29
    expr_repeat                    shift and go to state 3
    expr2                          shift and go to state 5

state 27

    (4) expr_repeat -> REPEAT NUMBER LBRACKET . expr RBRACKET
    (2) expr -> . expr expr_repeat
    (3) expr -> . expr_repeat
    (4) expr_repeat -> . REPEAT NUMBER LBRACKET expr RBRACKET
    (5) expr_repeat -> . expr2
    (6) expr2 -> . FORWARD terme
    (7) expr2 -> . BACKWARD terme
    (8) expr2 -> . LEFT terme
    (9) expr2 -> . RIGHT terme
    (10) expr2 -> . PEN UP
    (11) expr2 -> . PEN DOWN
    (12) expr2 -> . PEN COLOR COLORVALUE
    (13) expr2 -> . TO NOM expr END
    (14) expr2 -> . NOM

    REPEAT          shift and go to state 4
    FORWARD         shift and go to state 6
    BACKWARD        shift and go to state 7
    LEFT            shift and go to state 8
    RIGHT           shift and go to state 9
    PEN             shift and go to state 10
    TO              shift and go to state 11
    NOM             shift and go to state 12

    expr                           shift and go to state 30
    expr_repeat                    shift and go to state 3
    expr2                          shift and go to state 5

state 28

    (12) expr2 -> PEN COLOR COLORVALUE .

    REPEAT          reduce using rule 12 (expr2 -> PEN COLOR COLORVALUE .)
    FORWARD         reduce using rule 12 (expr2 -> PEN COLOR COLORVALUE .)
    BACKWARD        reduce using rule 12 (expr2 -> PEN COLOR COLORVALUE .)
    LEFT            reduce using rule 12 (expr2 -> PEN COLOR COLORVALUE .)
    RIGHT           reduce using rule 12 (expr2 -> PEN COLOR COLORVALUE .)
    PEN             reduce using rule 12 (expr2 -> PEN COLOR COLORVALUE .)
    TO              reduce using rule 12 (expr2 -> PEN COLOR COLORVALUE .)
    NOM             reduce using rule 12 (expr2 -> PEN COLOR COLORVALUE .)
    $end            reduce using rule 12 (expr2 -> PEN COLOR COLORVALUE .)
    END             reduce using rule 12 (expr2 -> PEN COLOR COLORVALUE .)
    RBRACKET        reduce using rule 12 (expr2 -> PEN COLOR COLORVALUE .)


state 29

    (13) expr2 -> TO NOM expr . END
    (2) expr -> expr . expr_repeat
    (4) expr_repeat -> . REPEAT NUMBER LBRACKET expr RBRACKET
    (5) expr_repeat -> . expr2
    (6) expr2 -> . FORWARD terme
    (7) expr2 -> . BACKWARD terme
    (8) expr2 -> . LEFT terme
    (9) expr2 -> . RIGHT terme
    (10) expr2 -> . PEN UP
    (11) expr2 -> . PEN DOWN
    (12) expr2 -> . PEN COLOR COLORVALUE
    (13) expr2 -> . TO NOM expr END
    (14) expr2 -> . NOM

    END             shift and go to state 31
    REPEAT          shift and go to state 4
    FORWARD         shift and go to state 6
    BACKWARD        shift and go to state 7
    LEFT            shift and go to state 8
    RIGHT           shift and go to state 9
    PEN             shift and go to state 10
    TO              shift and go to state 11
    NOM             shift and go to state 12

    expr_repeat                    shift and go to state 13
    expr2                          shift and go to state 5

state 30

    (4) expr_repeat -> REPEAT NUMBER LBRACKET expr . RBRACKET
    (2) expr -> expr . expr_repeat
    (4) expr_repeat -> . REPEAT NUMBER LBRACKET expr RBRACKET
    (5) expr_repeat -> . expr2
    (6) expr2 -> . FORWARD terme
    (7) expr2 -> . BACKWARD terme
    (8) expr2 -> . LEFT terme
    (9) expr2 -> . RIGHT terme
    (10) expr2 -> . PEN UP
    (11) expr2 -> . PEN DOWN
    (12) expr2 -> . PEN COLOR COLORVALUE
    (13) expr2 -> . TO NOM expr END
    (14) expr2 -> . NOM

    RBRACKET        shift and go to state 32
    REPEAT          shift and go to state 4
    FORWARD         shift and go to state 6
    BACKWARD        shift and go to state 7
    LEFT            shift and go to state 8
    RIGHT           shift and go to state 9
    PEN             shift and go to state 10
    TO              shift and go to state 11
    NOM             shift and go to state 12

    expr_repeat                    shift and go to state 13
    expr2                          shift and go to state 5

state 31

    (13) expr2 -> TO NOM expr END .

    REPEAT          reduce using rule 13 (expr2 -> TO NOM expr END .)
    FORWARD         reduce using rule 13 (expr2 -> TO NOM expr END .)
    BACKWARD        reduce using rule 13 (expr2 -> TO NOM expr END .)
    LEFT            reduce using rule 13 (expr2 -> TO NOM expr END .)
    RIGHT           reduce using rule 13 (expr2 -> TO NOM expr END .)
    PEN             reduce using rule 13 (expr2 -> TO NOM expr END .)
    TO              reduce using rule 13 (expr2 -> TO NOM expr END .)
    NOM             reduce using rule 13 (expr2 -> TO NOM expr END .)
    $end            reduce using rule 13 (expr2 -> TO NOM expr END .)
    END             reduce using rule 13 (expr2 -> TO NOM expr END .)
    RBRACKET        reduce using rule 13 (expr2 -> TO NOM expr END .)


state 32

    (4) expr_repeat -> REPEAT NUMBER LBRACKET expr RBRACKET .

    REPEAT          reduce using rule 4 (expr_repeat -> REPEAT NUMBER LBRACKET expr RBRACKET .)
    FORWARD         reduce using rule 4 (expr_repeat -> REPEAT NUMBER LBRACKET expr RBRACKET .)
    BACKWARD        reduce using rule 4 (expr_repeat -> REPEAT NUMBER LBRACKET expr RBRACKET .)
    LEFT            reduce using rule 4 (expr_repeat -> REPEAT NUMBER LBRACKET expr RBRACKET .)
    RIGHT           reduce using rule 4 (expr_repeat -> REPEAT NUMBER LBRACKET expr RBRACKET .)
    PEN             reduce using rule 4 (expr_repeat -> REPEAT NUMBER LBRACKET expr RBRACKET .)
    TO              reduce using rule 4 (expr_repeat -> REPEAT NUMBER LBRACKET expr RBRACKET .)
    NOM             reduce using rule 4 (expr_repeat -> REPEAT NUMBER LBRACKET expr RBRACKET .)
    $end            reduce using rule 4 (expr_repeat -> REPEAT NUMBER LBRACKET expr RBRACKET .)
    END             reduce using rule 4 (expr_repeat -> REPEAT NUMBER LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 4 (expr_repeat -> REPEAT NUMBER LBRACKET expr RBRACKET .)

